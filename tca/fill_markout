# Implementation of examples from OneTickQueryTrainingHandsOnExercices.pdf
# with 'quersive' package


import pandas as pd
from datetime import datetime
import os

os.environ['OMD_ROOT'] = 'C:/CloudMail/Projects/Vanguard/TCA'
os.environ['OMD_BASE'] = 'C:/OMD'
os.environ['ONE_TICK_CONFIG'] = 'C:/CloudMail/Projects/Vanguard/TCA/client_data/config/one_tick_config.txt'

import quersive as q

context = 'DEFAULT'

def display_results(data, symbols=None, n=5):
    pd.set_option('display.width',250)
    if symbols is not None:
        for sym in symbols:
            print(sym)
            df = pd.DataFrame(data[sym])
            print(df.head(n))
    else:
        df = pd.DataFrame(data[''])
        print(df.head(n))


def main():
    symbols = ['NYSE_TAQ::AAPL']
    db = ['DEMO_L1::']
    start_time, end_time = datetime(2017, 5, 4, 9, 30), datetime(2017, 5, 4, 9, 35)
    offsets = [1, 5, 10]

    # first stage: get symbols
    get_symbols = q.Graph(q.find_db_symbols(pattern='%', ticktype='NA'))
    get_symbols >> q.add_field(field='WEIGHT', value='100')
    get_symbols = get_symbols.save(db, start_time, end_time)

    # create a block
    markout_otq = "C:/Temp/markout.otq"
    markout = q.Graph(q.passthrough(ticktype='TRD',fields='PRICE,SIZE',go_back_to_first_tick=86400*3)) >> q.first_tick()
    markout = markout.save(symbols, start_time, end_time, otq_file=markout_otq)

    # main query
    graph = q.Graph(q.passthrough(ticktype='TRD', fields='PRICE,SIZE'))

    for offset in offsets:
        graph >> q.join_with_query(otq_query='"{}"'.format(markout_otq),
                                   start_timestamp='TIMESTAMP+{}*1000'.format(offset),
                                   end_timestamp='TIMESTAMP+{}*1000'.format(offset),
                                   join_type='INNER',
                                   prefix_for_output_ticks='markout.{}.'.format(offset))

    # Process results
    # Save graph
    #graph.save(q.staged_query(get_symbols), start_time, end_time, otq_file='C:/temp/multi_stage.otq', query_name='main')
    #graph.save('eval("{}")'.format(get_symbols), start_time, end_time, otq_file='C:/temp/multi_stage.otq', query_name='main')

    # Print results
    #data = q.run_query(graph, symbol=q.staged_query('C:/temp/temp.otq::find_db_symbols'), s=start_time, e=end_time)
    #data = q.run_query(graph, symbol=q.staged_query(get_symbols), s=start_time, e=end_time)
    data = q.run_query(graph, symbol=symbols, s=start_time, e=end_time, timezone='EST5EDT')

    #print(data)
    display_results(data, symbols=symbols)


if __name__ == '__main__': main()
